#!/usr/bin/env python3
"""
Point d'entr√©e principal de la plateforme multi-agents.
Ce script g√®re l'interface utilisateur en ligne de commande (CLI),
la s√©lection de projet, la configuration de l'ex√©cution et
l'orchestration du d√©marrage du Superviseur.
"""

import sys
import os
from pathlib import Path
import time
from typing import Dict, Any, Optional
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from dotenv import load_dotenv

# Ajouter le r√©pertoire racine au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from core.project_manager import ProjectManager
from agents.supervisor import Supervisor
from core.metrics_visualizer import MetricsVisualizer
from utils.logger import setup_logger

# Charger les variables d'environnement
load_dotenv()

# Console Rich pour l'affichage
console = Console()
logger = setup_logger("main")

# Exemples de projets pr√©d√©finis
PROJECT_TEMPLATES = {
    "1": {
        "name": "MLPricePredictor",
        "description": "API ML pour pr√©diction prix immobilier",
        "prompt": """Nom du Projet : MLPricePredictor

Objectif G√©n√©ral :
Cr√©er une API REST compl√®te en Python pour pr√©dire le prix de biens immobiliers en se basant sur leurs caract√©ristiques. Le projet doit couvrir l'ensemble du cycle de vie du Machine Learning, de la pr√©paration des donn√©es au d√©ploiement d'une API de pr√©diction.

Stack Technique Impos√©e :
- Framework API : FastAPI
- Serveur Web : Uvicorn
- Biblioth√®ques ML : Scikit-learn, Pandas
- Validation de Donn√©es : Pydantic (int√©gr√© √† FastAPI)
- Tests : Pytest

Source des Donn√©es (Description) :
Le mod√®le devra √™tre entra√Æn√© sur un fichier CSV qui sera nomm√© housing_data.csv. Ce fichier contiendra les colonnes suivantes :
- surface_m2 (num√©rique, ex: 85.0)
- nb_pieces (entier, ex: 4)
- nb_sdb (entier, ex: 2)
- etage (entier, ex: 3)
- ville (cat√©gorielle, ex: "Paris", "Lyon", "Marseille")
- a_renover (bool√©en, ex: True/False)
- prix_m2 (num√©rique, la cible √† pr√©dire, ex: 9500.0)

NOTE IMPORTANTE POUR LES AGENTS : Le fichier housing_data.csv n'existe pas. Une des premi√®res t√¢ches du D√©veloppeur sera de g√©n√©rer un fichier CSV de donn√©es factices (dummy_data.csv) avec une centaine de lignes respectant ce format pour permettre l'entra√Ænement et les tests.

Fonctionnalit√©s D√©taill√©es et Exigences :

1. Script de Pr√©paration des Donn√©es (data_processing.py) :
- Charger les donn√©es depuis le fichier CSV
- G√©rer les valeurs manquantes de mani√®re simple (remplacer par moyenne/m√©diane pour num√©rique, mode pour cat√©goriel)
- Effectuer l'ing√©nierie des caract√©ristiques (feature engineering) :
  * Transformer les variables cat√©gorielles (ville) en variables num√©riques avec One-Hot Encoding
  * Transformer la variable bool√©enne (a_renover) en 0 ou 1
- S√©parer les donn√©es en caract√©ristiques (X) et en cible (y)

2. Script d'Entra√Ænement du Mod√®le (model_training.py) :
- Utiliser les fonctions de data_processing.py
- Diviser les donn√©es en ensemble d'entra√Ænement et de test (80% / 20%)
- Utiliser RandomForestRegressor de Scikit-learn
- Entra√Æner le mod√®le sur l'ensemble d'entra√Ænement
- √âvaluer la performance (score R¬≤ et erreur quadratique moyenne - MSE)
- CRUCIAL : Sauvegarder le mod√®le entra√Æn√© et l'encodeur One-Hot dans des fichiers (model.pkl et encoder.pkl avec joblib)

3. API REST avec FastAPI (main.py) :
- Charger le mod√®le et l'encodeur sauvegard√©s au d√©marrage
- Cr√©er un endpoint POST /predict
- Accepter JSON d'entr√©e avec caract√©ristiques du bien (sans le prix)
- Utiliser mod√®le Pydantic pour validation des donn√©es d'entr√©e
- Exemple JSON entr√©e : {"surface_m2": 120.0, "nb_pieces": 5, "nb_sdb": 2, "etage": 4, "ville": "Paris", "a_renover": false}
- Transformer les donn√©es avec l'encodeur charg√© puis pr√©dire avec le mod√®le
- Retourner la pr√©diction du prix total (prix_m2 pr√©dit * surface_m2) en JSON
- Exemple JSON sortie : {"prediction_prix_total": 1140000.0}

4. Tests Unitaires (tests/test_api.py) :
- Cr√©er au moins un test pour l'endpoint /predict
- V√©rifier statut 200 OK et pr√©sence de prediction_prix_total avec valeur num√©rique

5. Documentation et Configuration :
- G√©n√©rer requirements.txt avec toutes les d√©pendances
- Cr√©er README.md d√©taill√© avec installation, lancement API et exemple curl"""
    },
    "2": {
        "name": "Calculator",
        "description": "Calculatrice scientifique",
        "prompt": """D√©velopper une calculatrice en Python avec :
- Op√©rations de base (+, -, *, /)
- Interface en ligne de commande interactive
- Tests unitaires complets
- Documentation des fonctions"""
    },
    "3": {
        "name": "FileOrganizer",
        "description": "Organisateur de fichiers automatique",
        "prompt": """Cr√©er un outil d'organisation automatique de fichiers qui :
- Trie les fichiers par type (documents, images, vid√©os, etc.)
- Renomme les fichiers selon des patterns configurables
- D√©tecte et g√®re les doublons
- Cr√©e une structure de dossiers organis√©e
- G√©n√®re un rapport des actions effectu√©es
- Mode simulation (dry-run) avant ex√©cution
- Configuration via fichier YAML"""
    },
    "4": {
        "name": "ChatBot",
        "description": "Chatbot assistant simple",
        "prompt": """Cr√©er un chatbot assistant capable de :
- R√©pondre √† des questions simples
- Maintenir le contexte de conversation
- Int√©grer avec une base de connaissances
- Sauvegarder l'historique des conversations
- Personnalit√©s configurables
- Interface CLI interactive
- Tests des diff√©rents sc√©narios"""
    }
}


class AutoGenMain:
    """Gestionnaire de d√©marrage rapide."""
    
    def __init__(self):
        self.console = console
        self.project_manager = ProjectManager()
    
    def display_welcome(self):
        """Affiche l'√©cran de bienvenue."""
        welcome_text = """
        üöÄ Plateforme Multi-Agents IA - AutoGen
        
        Orchestrez votre √©quipe d'agents IA pour cr√©er des projets complets.
        Choisissez un template ou cr√©ez votre propre projet !
        """
        
        self.console.print(Panel(welcome_text, title="Bienvenue", style="bold blue"))
    
    def check_api_key(self) -> bool:
        """V√©rifie la pr√©sence des cl√©s API."""
        mistral_key = os.getenv("MISTRAL_API_KEY")
        deepseek_key = os.getenv("DEEPSEEK_API_KEY")
        
        if not mistral_key and not deepseek_key:
            self.console.print("[bold red]‚ùå Aucune cl√© API trouv√©e ![/bold red]")
            self.console.print("\nPour configurer :")
            self.console.print("1. Copiez .env.example vers .env")
            self.console.print("2. Ajoutez votre cl√© API Mistral ou DeepSeek")
            self.console.print("\nObtenez une cl√© sur :")
            self.console.print("- Mistral: https://console.mistral.ai/")
            self.console.print("- DeepSeek: https://platform.deepseek.com/")
            return False
        
        if mistral_key:
            self.console.print("[green]‚úÖ Cl√© API Mistral d√©tect√©e[/green]")
        if deepseek_key:
            self.console.print("[green]‚úÖ Cl√© API DeepSeek d√©tect√©e[/green]")
        
        return True
    
    def display_templates(self):
        """Affiche les templates disponibles."""
        table = Table(title="Templates de Projets Disponibles", show_header=True)
        table.add_column("N¬∞", style="cyan", width=4)
        table.add_column("Nom", style="magenta", width=20)
        table.add_column("Description", style="white")
        
        for key, template in PROJECT_TEMPLATES.items():
            table.add_row(key, template["name"], template["description"])
        
        table.add_row("0", "Custom", "Cr√©er votre propre projet")
        
        self.console.print("\n")
        self.console.print(table)
        self.console.print("\n")
    
    def get_project_choice(self) -> Dict[str, Any]:
        """Obtient le choix de projet de l'utilisateur."""
        choice = Prompt.ask(
            "[bold cyan]Choisissez un template (0, 1, 2, 3, 4)[/bold cyan]",
            choices=["0", "1", "2", "3", "4"],
            default="0"
        )
        
        if choice == "0":
            # Projet custom
            name = Prompt.ask("[bold cyan]Nom du projet[/bold cyan]")
            self.console.print("\n[bold cyan]Description du projet[/bold cyan]")
            self.console.print("[dim]D√©crivez ce que vous voulez cr√©er...[/dim]")
            
            lines = []
            self.console.print("[dim](Appuyez sur Entr√©e deux fois pour terminer)[/dim]\n")
            
            empty_lines = 0
            while empty_lines < 2:
                line = input()
                if line:
                    lines.append(line)
                    empty_lines = 0
                else:
                    empty_lines += 1
            
            prompt = '\n'.join(lines).strip()
            
            return {
                "name": name,
                "description": "Projet personnalis√©",
                "prompt": prompt
            }
        else:
            return PROJECT_TEMPLATES[choice]
    
    def display_execution_options(self) -> Dict[str, bool]:
        """Affiche les options d'ex√©cution."""
        self.console.print("\n[bold]Options d'ex√©cution[/bold]")
        
        options = {
            "auto_execute": Confirm.ask(
                "Ex√©cuter automatiquement tous les jalons ?",
                default=True
            ),
            "generate_metrics": Confirm.ask(
                "G√©n√©rer le dashboard de m√©triques ?",
                default=True
            ),
            "verbose": Confirm.ask(
                "Mode verbose (afficher tous les d√©tails) ?",
                default=True
            )
        }
        
        return options
    
    def execute_project(self, project: Dict[str, Any], options: Dict[str, bool]):
        """Ex√©cute le projet avec les options choisies."""
        project_name = project["name"]
        project_prompt = project["prompt"]
        
        # Cr√©er la structure du projet
        self.console.print(f"\n[bold]üìÅ Cr√©ation du projet {project_name}...[/bold]")
        project_path = self.project_manager.create_project_structure(project_name)
        
        if not project_path:
            self.console.print("[red]‚ùå √âchec de la cr√©ation du projet[/red]")
            return
        
        self.console.print(f"[green]‚úÖ Projet cr√©√© dans : {project_path}[/green]")
        
        # Initialiser le superviseur
        self.console.print("\n[bold]ü§ñ Initialisation de l'√©quipe d'agents...[/bold]")
        
        try:
            # 1. Importer la classe RAGEngine si ce n'est pas d√©j√† fait
            from core.rag_engine import RAGEngine

            # 2. Cr√©er l'instance du moteur RAG pour ce projet
            rag_engine = RAGEngine(project_name=project_name)
            self.console.print("[green]‚úÖ Moteur RAG initialis√©[/green]")

            # 3. Passer l'instance RAG au Superviseur lors de sa cr√©ation
            supervisor = Supervisor(
                project_name=project_name, 
                project_prompt=project_prompt,
                rag_engine=rag_engine  # <-- Ajout crucial
            )
            self.console.print("[green]‚úÖ Superviseur initialis√© et connect√© au RAG[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå Erreur : {str(e)}[/red]")
            return




        # Planification
        self.console.print("\n[bold]üìã Planification du projet...[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("Analyse en cours...", total=None)
            
            plan = supervisor.think({'prompt': project_prompt})
            progress.update(task, completed=True)
        
        # Afficher l'analyse
        if plan.get('project_analysis'):
            analysis = plan['project_analysis']
            self.console.print("\n[bold]üìä Analyse du projet :[/bold]")
            self.console.print(f"  ‚Ä¢ Type : {analysis.get('project_type', 'N/A')}")
            self.console.print(f"  ‚Ä¢ Complexit√© : {analysis.get('complexity', 'N/A')}")
            self.console.print(f"  ‚Ä¢ Dur√©e estim√©e : {analysis.get('estimated_duration', 'N/A')}")
        
        # Pr√©paration
        self.console.print("\n[bold]üë• Pr√©paration de l'√©quipe...[/bold]")
        prep_result = supervisor.act(plan)
        
        self.console.print(f"[green]‚úÖ {prep_result['agents_created']} agents cr√©√©s[/green]")
        self.console.print(f"[green]‚úÖ {prep_result['milestones_created']} jalons d√©finis[/green]")
        
        # Afficher les jalons
        self.console.print("\n[bold]üéØ Jalons du projet :[/bold]")
        for i, milestone in enumerate(supervisor.milestones, 1):
            self.console.print(f"\n{i}. [cyan]{milestone['name']}[/cyan]")
            self.console.print(f"   {milestone.get('description', 'N/A')}")
            self.console.print(f"   Agents : {', '.join(milestone['agents_required'])}")
        
        # Ex√©cution automatique si demand√©e
        if options["auto_execute"]:
            if Confirm.ask("\n[bold yellow]Lancer l'ex√©cution automatique ?[/bold yellow]", default=True):
                self.console.print("\n[bold]üöÄ Lancement de l'orchestration compl√®te...[/bold]")
                self.console.print("[dim]Les agents vont maintenant travailler. Cela peut prendre plusieurs minutes.[/dim]")
                
                # Lancement de l'orchestration compl√®te
                final_results = supervisor.orchestrate()
                
                self.console.print("\n[bold green]‚ú® Orchestration termin√©e ![/bold green]")
                
                # Afficher un r√©sum√© d√©taill√© des r√©sultats
                milestone_results = final_results.get('milestones_results', [])
                completed_count = sum(1 for r in milestone_results if r.get('status') == 'completed')
                self.console.print(f"  ‚Ä¢ {completed_count}/{len(milestone_results)} jalons compl√©t√©s.")
                
                # Ajouter le rapport de progression d√©taill√© du superviseur
                try:
                    report = supervisor.get_progress_report()
                    self.console.print(f"  ‚Ä¢ Progression : {report['progress_percentage']:.0f}%")
                    self.console.print(f"  ‚Ä¢ Statut : {report['status']}")
                    self.console.print(f"  ‚Ä¢ Mod√®le LLM : {report.get('llm_model', 'N/A')}")
                except Exception as e:
                    self.console.print(f"  ‚Ä¢ [dim]Rapport d√©taill√© non disponible: {str(e)}[/dim]")
        
        # G√©n√©ration des m√©triques
        if options["generate_metrics"]:
            self.console.print("\n[bold]üìä G√©n√©ration du dashboard...[/bold]")
            
            visualizer = MetricsVisualizer(project_name)
            dashboard_path = visualizer.generate_dashboard(supervisor.rag_singleton)
            
            self.console.print(f"[green]‚úÖ Dashboard g√©n√©r√© : {dashboard_path}[/green]")
            
            # Ouvrir automatiquement le dashboard
            if Confirm.ask("Ouvrir le dashboard dans le navigateur ?", default=True):
                import webbrowser
                webbrowser.open(f"file://{Path(dashboard_path).absolute()}")
        
        # R√©sum√© final
        self.console.print("\n[bold green]üéâ Projet termin√© ![/bold green]")
        self.console.print(f"\nüìÅ Fichiers du projet : {project_path}")
        self.console.print("üìÑ Artefacts g√©n√©r√©s :")
        
        # Lister les fichiers cr√©√©s
        for folder in ['docs', 'src', 'tests']:
            folder_path = project_path / folder
            if folder_path.exists():
                files = list(folder_path.glob('*'))
                if files:
                    self.console.print(f"\n  [{folder}/]")
                    for file in files[:5]:  # Limiter l'affichage
                        self.console.print(f"    ‚Ä¢ {file.name}")
                    if len(files) > 5:
                        self.console.print(f"    ... et {len(files) - 5} autres fichiers")
    
    def run(self):
        """Lance le processus de d√©marrage rapide."""
        try:
            # Bienvenue
            self.display_welcome()
            
            # V√©rifier les cl√©s API
            if not self.check_api_key():
                return
            
            # Afficher les templates
            self.display_templates()
            
            # Obtenir le choix
            project = self.get_project_choice()
            
            # Confirmer
            self.console.print("\n[bold]Projet s√©lectionn√© :[/bold]")
            self.console.print(f"Nom : [cyan]{project['name']}[/cyan]")
            self.console.print(f"Description : {project['description']}")
            
            if not Confirm.ask("\nContinuer avec ce projet ?", default=True):
                self.console.print("[yellow]Annul√© par l'utilisateur[/yellow]")
                return
            
            # Options d'ex√©cution
            options = self.display_execution_options()
            
            # Ex√©cuter
            self.execute_project(project, options)
            
        except KeyboardInterrupt:
            self.console.print("\n[yellow]Interrompu par l'utilisateur[/yellow]")
        except Exception as e:
            self.console.print(f"\n[red]Erreur : {str(e)}[/red]")
            logger.error(f"Erreur dans main: {str(e)}", exc_info=True)


def main():
    """Point d'entr√©e principal."""
    autogen = AutoGenMain()
    autogen.run()


if __name__ == "__main__":
    main()
