# Fichier de configuration principal de la plateforme multi-agents.
# Ce fichier définit le comportement par défaut de tous les composants,
# y compris les modèles LLM, les paramètres des agents, la configuration
# du RAG et les stratégies de communication.

general:
  max_retries: 3
  retry_delay: 5
  llm_timeout: 120  # Réduire le timeout pour éviter les blocages
  conversation_memory_size: 6  # correspond aux deux derniers echanges request+responses
  conversation_compression_threshold: 50000  #  Seuil en caractères pour déclencher la compression de l'historique 60000 moitié du max appel API
  max_tokens: 32768
  # Rate limiting global pour tous les appels API
  api_rate_limit_interval: 2  # Secondes entre chaque appel API (tous fournisseurs confondus) 

llm:
  default_model: "mistral-small-latest"
  temperature: 0.7   
  models:
    mistral:
      api_base: "https://api.mistral.ai/v1"
      models:
        - name: "mistral-small-latest"
          temperature: 0.7
          max_tokens: 32768
        - name: "mistral-medium-latest"
          temperature: 0.7
          max_tokens: 32768
        - name: "mistral-large-latest"
          temperature: 0.7
          max_tokens: 32768
        - name: "codestral-latest"
          temperature: 0.3
          max_tokens: 32768
        - name: "magistral-small-2506"
          temperature: 0.7
          max_tokens: 32768
        - name: "magistral-medium-latest"
          temperature: 0.7
          max_tokens: 32768




          
    deepseek:
      api_base: "https://api.deepseek.com/v1"
      models:
        - name: "deepseek-chat"
          temperature: 0.7
        - name: "deepseek-coder"
          temperature: 0.3

# Configuration du système d'outils
tools:
  # Configuration globale des outils
  global:
    # Format de logging des outils
    log_format: json
    # Timeout par défaut pour l'exécution d'un outil (secondes)
    default_timeout: 60
    # Activer le cache des résultats d'outils
    enable_cache: false
  
  # Configuration spécifique par outil
  specific:
    implement_code:
      max_lines: 500
    create_tests:
      default_coverage_target: 85
      test_frameworks:
        python: pytest
        javascript: jest
        typescript: jest
    create_document:
      max_length: 15000
      default_format: markdown
    generate_architecture_diagrams:
      format: mermaid
      max_nodes: 50


agents:
  supervisor:
    role: "Superviseur et coordinateur principal du projet"
    personality: "Méthodique, stratégique, orienté résultats. Excellent communicateur qui sait déléguer efficacement."
    model: "mistral-medium-latest"
    max_milestones: 15
    allow_dynamic_milestones: true
    max_global_corrections: 10  # Maximum de corrections (reworks + plan modifications) pour tout le projet
    guidelines:
      - "Analyser le projet et identifier la complexité réelle"
      - "Créer des jalons cohérents et atteignables par un LLM en une fois"
      - "Déléguer les tâches aux agents appropriés selon leurs forces"
      - "Superviser sans micro-manager"
      - "Arbitrer les conflits et débloquer les situations"
      - "Maintenir une vision globale du projet"
      - "Communiquer en JSON structuré quand c'est pertinent"
  
  analyst:
    role: "Expert en analyse, architecture et qualité. Responsable de la conception complète et des standards."
    personality: "Rigoureux, visionnaire. Équilibre parfait entre théorie et pratique."
    model: "mistral-medium-latest"
    guidelines:
      - "COMMENCER par identifier le langage/framework approprié selon le projet"
      - "Spécifier la stack technique dans les premières spécifications"
      - "Analyser en profondeur les besoins fonctionnels et non-fonctionnels"
      - "Concevoir une architecture robuste et évolutive"
      - "Définir les standards de code et bonnes pratiques"
      - "Créer des spécifications techniques détaillées"
      - "Anticiper les contraintes et proposer des solutions"
      - "Documenter clairement toutes les décisions importantes"
      - "Établir les critères de qualité et métriques"
      - "Communiquer en JSON pour les spécifications techniques"
      - "Utiliser le RAG pour enrichir l'analyse avec le contexte projet"
      - "TOUJOURS utiliser search_context pour vérifier l'existant avant de créer un nouveau document ou analyse"
      - "En cas de doute sur la pertinence d'une analyse, consulter le SUPERVISEUR via send_message_to_agent('supervisor', 'question')"
      - "Consulter le Developer pour valider la faisabilité technique"
      - "RESPONSABILITÉ OUTIL generate_configuration_files: Créer UNIQUEMENT les fichiers de STANDARDS et CONVENTIONS d'équipe (formatage, linting, édition, git) en PHASE DE CONCEPTION. Ne pas créer les manifestes et documentation du projet final."
      - "CRUCIAL fulfills_deliverable: Utiliser EXACTEMENT les noms de livrables du jalon tels qu'ils sont demandés"
  
  developer:
    role: "Expert en développement, tests et documentation technique. Transforme les spécifications en code de qualité."
    personality: "Pragmatique, rigoureux sur la qualité. Passionné par le code propre et les tests."
    model: "codestral-latest"
    guidelines:
      - "TOUJOURS implémenter du code FONCTIONNEL et COMPLET - JAMAIS de stubs, placeholders ou commentaires 'à compléter' - sauf si après confirmation auprès d'un autre agent ce n'est plus pertinent"
      - "Écrire du code qui fonctionne immédiatement après implémentation, avec toute la logique nécessaire"
      - "Inclure la gestion d'erreurs complète (try/catch, validations, exceptions spécifiques)"
      - "Implémenter toutes les fonctionnalités demandées dans la tâche, pas seulement les signatures"
      - "Écrire des tests unitaires RÉELS qui testent le code implémenté (pas des tests vides)"
      - "Ajouter des docstrings détaillées avec exemples d'utilisation concrets"
      - "Créer des imports et dépendances nécessaires pour que le code soit exécutable"
      - "Utiliser le RAG pour comprendre le contexte, mais ignorer les exemples incomplets qu'il pourrait contenir"
      - "TOUJOURS utiliser search_context pour vérifier l'existant avant de créer un nouveau fichier de code"
      - "En cas de doute sur la pertinence ou la nécessité d'une tâche, consulter le SUPERVISEUR via send_message_to_agent('supervisor', 'question')"
      - "Valider que le code généré est prêt pour la production, pas pour un prototype"
      - "OPTIMISATION JSON: Si le code d'un fichier dépasse 8000 caractères, diviser en plusieurs outils implement_code séparés ou utiliser des imports pour réduire la taille"
      - "OPTIMISATION JSON: Privilégier des noms de fichiers courts et du code concis pour éviter les échecs de parsing JSON"
      - "CRUCIAL fulfills_deliverable: Utiliser EXACTEMENT les noms de livrables du jalon tels qu'ils sont demandés"
      - "RESPONSABILITÉ OUTIL create_project_file: Créer UNIQUEMENT les LIVRABLES FINAUX du projet (README, manifestes de dépendances, documentation utilisateur) en PHASE DE LIVRAISON. Ne pas créer les configs de standards d'équipe."



# Configuration structure superviseur
supervisor:
  # Nombre minimum de jalons
  min_milestones: 2
  # Nombre maximum de jalons
  max_milestones: 15
  # Permettre l'ajout dynamique de jalons
  allow_dynamic_milestones: true



communication:
  enabled: true
  max_exchanges_per_task: 5
  exchange_timeout: 30
  log_exchanges: true
  summarize_exchanges_in_rag: true
  preferred_format: "json"
  json_exchange_priority: 0.8

rag:
  embedding_model: "mistral-embed"
  chunk_size: 500                    # Taille de chaque chunk en caractères lors de l'indexation
  chunk_overlap: 50                  # Chevauchement entre chunks consécutifs (préserve le contexte)
  max_document_size: 50000           # Taille max d'un document indexé (50000÷500 = 100 chunks max)
  top_k: 5                          # Nombre max de chunks retournés par recherche (utilisé partout)
  similarity_threshold: 0.65         # Seuil de pertinence vectorielle (0-1, plus haut = plus strict)
  compression_threshold: 0.8         # Seuil pour compression automatique de l'historique
  max_vectors: 10000                # Limite du nombre total de vecteurs stockés
  
  # Configuration de l'injection automatique de contexte dans les prompts
  auto_context_injection:
    enabled: true
    max_context_length: 5000         # Total max de caractères injectés (réparti automatiquement entre top_k chunks)
    cache_enabled: true              # Met en cache les résultats RAG pour éviter recherches répétées
    search_timeout: 10               # Timeout pour les recherches vectorielles (secondes)
    
    # Service LLM léger pour extraction intelligente de mots-clés de recherche
    keyword_extraction:
      enabled: true                    # Active l'extraction automatique de mots-clés depuis les prompts
      model: "mistral-small-latest"    # Modèle LLM rapide et économique pour extraction
      max_tokens: 50                   # Limite courte pour les mots-clés (économise tokens)
      temperature: 0.1                 # Sortie déterministe et précise
      cache_ttl: 600                   # Cache 10min (mots-clés stables dans une session)
      timeout: 10                      # Timeout court pour extraction rapide
    
    # Résumé intelligent de contexte long
    context_summarization:
      enabled: true           # Activer le résumé automatique
      model: "mistral-small-latest"
      max_input_length: 25000  # Maximum possible pour grandes quantités
      max_output_length: 2000  # Résumé substantiel
      temperature: 0.1
      timeout: 30
      max_tokens_summary: 200  # Nombre max de tokens pour les résumés d'agents/milestones/Compression Rag
  
  score_weights:
    similarity: 0.6
    freshness: 0.2
    source: 0.2
  
  source_bonus:
    project_file: 0.9
    summary: 0.8
    log_entry: 0.5
    discovery: 0.6
    source_code: 0.85
    project_plan: 0.9
    project_journal: 0.75
    supervisor_report: 0.65
    plan_modification: 0.7
    milestone_partial_completion: 0.6
    manual: 0.55
  
  proactive_queries:
    - "architecture technique"
    - "spécifications fonctionnelles"
    - "contraintes et limitations"
    - "standards de code"
    - "tests et validation"
  
  min_confidence_score: 0.7
  max_context_tokens: 3000
  auto_index_enabled: true
  auto_index_extensions: [".py", ".js", ".ts", ".java", ".md", ".json", ".yaml"]
  auto_index_folders: ["src", "docs"]
  working_memory_enabled: true

monitoring:
  log_level: "DEBUG"
  enable_metrics: true
  metrics_export_interval: 300
  performance_tracking: true
